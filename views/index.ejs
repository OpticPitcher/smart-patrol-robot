<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TurtleBot3 Control Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js"></script>
    <style>
        :root {
            --main-bg: #0b0c0f;
            --accent-color: #ff1b6b;
            --text-color: #ffffff;
            --overlay-bg: rgba(11, 12, 15, 0.9);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            height: 100vh;
            width: 100vw;
            background: var(--main-bg);
            color: var(--text-color);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Grid Pattern */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(rgba(255, 27, 107, 0.03) 1px, transparent 1px),
                linear-gradient(90deg, rgba(255, 27, 107, 0.03) 1px, transparent 1px);
            background-size: 20px 20px;
            pointer-events: none;
            z-index: 1;
        }

        /* Add subtle radial gradient for depth */
        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, 
                transparent 0%, 
                rgba(11, 12, 15, 0.3) 100%);
            pointer-events: none;
            z-index: 2;
        }

        /* Adjust existing elements to work with the overlay */
        .header {
            position: relative;
            z-index: 3;
        }

        .main-container {
            position: relative;
            z-index: 3;
        }

        .controls-section {
            position: relative;
            z-index: 3;
        }

        /* Optional: Add subtle glow to main sections */
        .main-container::before {
            content: '';
            position: absolute;
            top: -1px;
            left: -1px;
            right: -1px;
            bottom: -1px;
            border-radius: 11px;
            background: transparent;
            background: linear-gradient(45deg, 
                rgba(255, 27, 107, 0.1), 
                transparent 40%,
                transparent 60%,
                rgba(255, 27, 107, 0.1));
            pointer-events: none;
            z-index: -1;
        }

        /* Optional: Add animated scanner line */
        @keyframes scan {
            0% {
                transform: translateY(-100%);
            }
            100% {
                transform: translateY(100%);
            }
        }

        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 200px;
            background: linear-gradient(
                to bottom,
                transparent,
                rgba(255, 27, 107, 0.05) 50%,
                transparent
            );
            animation: scan 8s linear infinite;
            pointer-events: none;
            z-index: 2;
        }

        /* Optional: Add subtle dot highlights at intersections */
        .grid-dots {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: radial-gradient(
                circle at center,
                rgba(255, 27, 107, 0.1) 1px,
                transparent 1px
            );
            background-size: 20px 20px;
            pointer-events: none;
            z-index: 1;
        }

        /* Header Section */
        .header {
            height: 60px;
            padding: 0 2rem;
            /* background: rgba(255, 255, 255, 0.1); */
            backdrop-filter: blur(1.2px);
            display: flex;
            justify-content: space-between;
            align-items: center;
            /* border-bottom: 2px solid var(--accent-color); */
        }

        .header-section {
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .title {
            font-size: 1.2rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            color: var(--accent-color);
        }

        .logout-btn {
            padding: 8px 16px;
            background: transparent;
            color: var(--text-color);
            border: 2px solid var(--accent-color);
            border-radius: 20px;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: var(--accent-color);
            box-shadow: 0 0 20px rgba(255, 27, 107, 0.3);
        }

        /* Main View Section */
        .main-container {
            flex: 1;
            position: relative;
            margin: 20px;
            margin-top: 0px;
            border: 2px solid var(--accent-color);
            border-radius: 10px;
            overflow: hidden;
        }

        .live-feed {
            width: 100%;
            height: 100%;
            /* background: var(--main-bg); */
        }

        .minimap {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 250px;
            height: 200px;
            border: 2px solid var(--accent-color);
            border-radius: 10px;
            overflow: hidden;
            z-index: 10;
            box-shadow: 0 0 20px rgba(255, 27, 107, 0.3);
        }

        /* Controls Section */
        .controls-section {
            height: 300px;
            padding: 1rem 2rem;
            background: 0,0,0.25;
            backdrop-filter: blur(1px);
            display: flex;
            justify-content: flex-start;
            align-items: center;
            /* border-top: 2px solid var(--accent-color); */
            gap: 2rem;
        }

        .terminal-container {
            display: none;
            /* Hidden by default on mobile */
            height: 100%;
            flex: 1;
            /* Take up remaining space */
            border: 1px solid var(--accent-color);
            border-radius: 10px;
            overflow: hidden;
            background: transparent;
            /* Removed black background */
        }

        /* Show terminal on larger screens */
        @media (min-width: 1200px) {
            .terminal-container {
                display: block;
            }

            .controls-section {
                justify-content: space-between;
            }
        }

        .controls-wrapper {
            display: flex;
            gap: 2rem;
            align-items: center;
            min-width: fit-content;
            /* Prevent controls from shrinking */
        }

        .left-controls {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        /* D-Pad */
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 50px);
            grid-template-rows: repeat(3, 50px);
            gap: 5px;
            opacity: 0.5;
            transition: opacity 0.3s ease;
        }

        .d-pad.enabled {
            opacity: 1;
        }

        .d-pad button {
            background: transparent;
            border: 2px solid var(--accent-color);
            color: var(--text-color);
            cursor: pointer;
            border-radius: 50%;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .d-pad button:hover:not(:empty) {
            background: var(--accent-color);
            box-shadow: 0 0 20px rgba(255, 27, 107, 0.3);
        }

        .d-pad button:empty {
            border: none;
            background: transparent;
            cursor: default;
            box-shadow: none;
        }

        /* Mode Toggle */
        .mode-toggle {
            display: flex;
            gap: 2px;
            background: rgba(255, 27, 107, 0.1);
            padding: 2px;
            border-radius: 50px;
            border: 1px solid #ff1b6b;
        }

        .mode-btn {
            padding: 6px 16px;
            background: transparent;
            border: none;
            color: #fff;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .mode-btn.active {
            background: #ff1b6b;
        }

        /* Control Cluster */
        .control-cluster {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            max-width: 600px;
        }

        .control-btn {
            background: transparent;
            border: 1px solid #ff1b6b;
            color: #fff;
            padding: 8px 20px;
            cursor: pointer;
            border-radius: 50px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 90px;
        }

        .control-btn:hover {
            background: rgba(255, 27, 107, 0.1);
            box-shadow: 0 0 10px rgba(255, 27, 107, 0.2);
        }

        .control-btn i {
            font-size: 0.8rem;
        }

        /* Home controls group */
        .home-controls {
            display: flex;
            gap: 2px;
        }

        .home-controls .control-btn {
            min-width: 70px;
        }

        /* Emergency stop */
        .emergency-stop {
            width: 100%;
            max-width: 300px;
            justify-content: center;
            border-color: #ff1b6b;
        }

        .emergency-stop:hover {
            background: rgba(255, 27, 107, 0.1);
        }

        @media (max-width: 1200px) {
            .control-cluster {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @media (max-width: 768px) {
            .controls-section {
                height: auto;
                flex-direction: column;
                gap: 1rem;
            }

            .left-controls {
                width: 100%;
                justify-content: space-between;
            }

            .control-cluster {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Battery Status Styles */
        .battery-status {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 4px 12px;
            background: rgba(255, 27, 107, 0.1);
            border-radius: 20px;
            margin-left: 20px;
        }

        .battery-status i {
            font-size: 1.2rem;
            color: var(--accent-color);
        }

        .battery-status span {
            font-size: 0.9rem;
            font-weight: bold;
        }

        /* Battery level colors */
        .battery-status.critical i {
            color: #ff4444;
            animation: blink 1s infinite;
        }

        .battery-status.low i {
            color: #ffbb33;
        }

        .battery-status.medium i {
            color: #ffeb3b;
        }

        .battery-status.good i {
            color: #00C851;
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>

<body>
    <div class="grid-dots"></div>
    <div class="header">
        <div class="header-section">
            <div id="datetime"></div>
            <div id="battery-status" class="battery-status">
                <i class="fas fa-battery-full"></i>
                <span id="battery-percentage">--%</span>
            </div>
        </div>
        <div class="title">Welcome, <%= username %></div>
        <form action="/logout?_method=DELETE" method="POST" style="margin: 0;">
            <button type="submit" class="logout-btn">LOGOUT</button>
        </form>
    </div>

    <div class="main-container">
        <canvas id="videoCanvas" class="live-feed"></canvas>
        <canvas id="mapCanvas" class="minimap"></canvas>
    </div>

    <div class="controls-section">
        <div class="controls-wrapper">
            <div class="left-controls">
                <div class="d-pad" id="d-pad">
                    <button></button>
                    <button onclick="sendCommand('forward')"><i class="fas fa-chevron-up"></i></button>
                    <button></button>
                    <button onclick="sendCommand('left')"><i class="fas fa-chevron-left"></i></button>
                    <button onclick="sendCommand('setWaypoint')"><i class="fas fa-map-marker-alt"></i></button>
                    <button onclick="sendCommand('right')"><i class="fas fa-chevron-right"></i></button>
                    <button></button>
                    <button onclick="sendCommand('backward')"><i class="fas fa-chevron-down"></i></button>
                    <button></button>
                </div>

                <div class="mode-toggle">
                    <button class="mode-btn" onclick="toggleMode('manual')">Manual</button>
                    <button class="mode-btn active" onclick="toggleMode('auto')">Auto</button>
                </div>
            </div>

            <div class="control-cluster">
                <button class="control-btn" onclick="sendCommand('init')">
                    <i class="fas fa-power-off"></i> Init
                </button>
                <button class="control-btn" onclick="sendCommand('clear')">
                    <i class="fas fa-eraser"></i> Clear
                </button>
                <button class="control-btn" onclick="sendCommand('mark')">
                    <i class="fas fa-map-marker-alt"></i> Mark
                </button>

                <div class="home-controls">
                    <button class="control-btn" onclick="sendCommand('setHome')">
                        <i class="fas fa-home"></i> Set
                    </button>
                    <button class="control-btn" onclick="sendCommand('goHome')">
                        <i class="fas fa-location-arrow"></i> Go
                    </button>
                </div>

                <button class="control-btn" onclick="sendCommand('logs')">
                    <i class="fas fa-file-download"></i> Logs
                </button>
                <button class="control-btn" onclick="sendCommand('calibrate')">
                    <i class="fas fa-crosshairs"></i> Cal
                </button>
                <button class="control-btn" onclick="sendCommand('config')">
                    <i class="fas fa-cog"></i> Config
                </button>
                <button class="control-btn" onclick="sendCommand('reset')">
                    <i class="fas fa-sync"></i> Reset
                </button>
                <button class="control-btn" onclick="sendCommand('battery')">
                    <i class="fas fa-battery-three-quarters"></i> Batt
                </button>
                <button class="control-btn" onclick="sendCommand('network')">
                    <i class="fas fa-wifi"></i> Net
                </button>

                <button class="control-btn emergency-stop" onclick="sendCommand('stop')">
                    <i class="fas fa-stop-circle"></i> Stop
                </button>
            </div>
        </div>

        <div class="terminal-container" id="terminal"></div>
    </div>

    <script>
        function updateDateTime() {
            const now = new Date();
            document.getElementById('datetime').textContent = now.toLocaleString();
        }

        setInterval(updateDateTime, 1000);
        updateDateTime();

        function toggleMode(mode) {
            const dpad = document.getElementById('d-pad');
            const buttons = document.querySelectorAll('.mode-btn');

            buttons.forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.toLowerCase() === mode) {
                    btn.classList.add('active');
                }
            });

            isManualMode = mode === 'manual';
            
            if (isManualMode) {
                dpad.classList.add('enabled');
            } else {
                dpad.classList.remove('enabled');
                // Send mode change to server
                if (robotWs && robotWs.readyState === WebSocket.OPEN) {
                    robotWs.send(JSON.stringify({
                        type: 'mode',
                        mode: 'auto'
                    }));
                }
            }
        }

        // Initialize WebSocket connection
        let robotWs = null;
        let videoCanvas = document.getElementById('videoCanvas');
        let mapCanvas = document.getElementById('mapCanvas');
        let videoCtx = videoCanvas.getContext('2d');
        let mapCtx = mapCanvas.getContext('2d');
        let img = new Image();
        let currentMap = null;
        let currentScan = null;
        let isManualMode = false;

        // Initialize in auto mode
        toggleMode('auto');

        // Add keyboard controls
        document.addEventListener('keydown', function(event) {
            if (!isManualMode) return; // Only process keys in manual mode
            
            switch(event.key.toLowerCase()) {
                case 'w':
                    sendCommand('forward');
                    break;
                case 's':
                    sendCommand('backward');
                    break;
                case 'a':
                    sendCommand('left');
                    break;
                case 'd':
                    sendCommand('right');
                    break;
                case ' ': // Space key
                    sendCommand('stop');
                    break;
                case 'enter': // Enter key for full speed forward
                    if (robotWs && robotWs.readyState === WebSocket.OPEN) {
                        robotWs.send(JSON.stringify({
                            type: 'control',
                            command: 'full_forward'
                        }));
                    }
                    break;
            }
        });

        // Set initial canvas sizes
        function resizeCanvas() {
            const container = videoCanvas.parentElement;
            videoCanvas.width = container.clientWidth;
            videoCanvas.height = container.clientHeight;
            
            const mapContainer = mapCanvas.parentElement;
            mapCanvas.width = mapContainer.clientWidth;
            mapCanvas.height = mapContainer.clientHeight;
        }

        // Call resize on load and window resize
        window.addEventListener('load', resizeCanvas);
        window.addEventListener('resize', resizeCanvas);

        // Battery status update function
        function updateBatteryStatus(data) {
            const batteryStatus = document.getElementById('battery-status');
            const batteryPercentage = document.getElementById('battery-percentage');
            const percentage = Math.round(data.percentage);
            
            // Update percentage text
            batteryPercentage.textContent = `${percentage}%`;
            
            // Update icon class based on percentage
            const icon = batteryStatus.querySelector('i');
            icon.className = 'fas ' + getBatteryIcon(percentage);
            
            // Update status class
            batteryStatus.className = 'battery-status ' + getBatteryStatusClass(percentage);
            
            // Update terminal with detailed battery info
            term.writeln(`\r\nBattery Status Update:`);
            term.writeln(`Percentage: ${percentage}%`);
            term.writeln(`Voltage: ${data.voltage.toFixed(2)}V`);
            term.writeln(`Current: ${data.current.toFixed(2)}A`);
            term.writeln(`Power Supply Status: ${data.power_supply_status}`);
            term.write('$ ');
        }

        function getBatteryIcon(percentage) {
            if (percentage >= 90) return 'fa-battery-full';
            if (percentage >= 70) return 'fa-battery-three-quarters';
            if (percentage >= 40) return 'fa-battery-half';
            if (percentage >= 20) return 'fa-battery-quarter';
            return 'fa-battery-empty';
        }

        function getBatteryStatusClass(percentage) {
            if (percentage <= 10) return 'critical';
            if (percentage <= 25) return 'low';
            if (percentage <= 50) return 'medium';
            return 'good';
        }

        function connectWebSocket() {
            if (!robotWs || robotWs.readyState === WebSocket.CLOSED) {
                robotWs = new WebSocket('ws://' + window.location.hostname + ':8766');
                
                robotWs.onopen = function() {
                    console.log('Connected to robot control server');
                    term.writeln('\r\nConnected to robot control server');
                };
                
                robotWs.onmessage = function(event) {
                    try {
                        const response = JSON.parse(event.data);
                        
                        if (response.type === 'camera') {
                            const base64Image = 'data:image/jpeg;base64,' + response.data;
                            img.src = base64Image;
                        } else if (response.type === 'map') {
                            currentMap = response.data;
                            drawMap();
                        } else if (response.type === 'scan') {
                            currentScan = response.data;
                            drawMap();
                        } else if (response.type === 'battery') {
                            updateBatteryStatus(response.data);
                        } else if (response.status === 'success' && response.velocities) {
                            term.writeln(`\r\nLinear: ${response.velocities.linear.toFixed(2)} m/s`);
                            term.writeln(`Angular: ${response.velocities.angular.toFixed(2)} rad/s`);
                            term.write('$ ');
                        }
                    } catch (error) {
                        console.error('Error processing WebSocket message:', error);
                        term.writeln('\r\nError processing WebSocket message: ' + error);
                    }
                };
                
                robotWs.onerror = function(error) {
                        console.error('WebSocket error:', error);
                    term.writeln('\r\nWebSocket error: ' + error);
                    };
                    
                robotWs.onclose = function() {
                        console.log('Disconnected from robot control server');
                    term.writeln('\r\nDisconnected from robot control server');
                    setTimeout(connectWebSocket, 5000);
                };
            }
        }

        // Draw the map and LiDAR data
        function drawMap() {
            if (!currentMap) return;

            const ctx = mapCtx;
            const width = mapCanvas.width;
            const height = mapCanvas.height;

            // Clear canvas
            ctx.clearRect(0, 0, width, height);

            // Calculate scale to fit map in canvas
            const scale = Math.min(
                width / currentMap.width,
                height / currentMap.height
            );

            // Center the map
            const offsetX = (width - currentMap.width * scale) / 2;
            const offsetY = (height - currentMap.height * scale) / 2;

            // Draw map
            for (let y = 0; y < currentMap.height; y++) {
                for (let x = 0; x < currentMap.width; x++) {
                    const index = y * currentMap.width + x;
                    const value = currentMap.data[index];

                    if (value === -1) { // Unknown
                        ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';
                    } else if (value > 50) { // Occupied
                        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
                    } else if (value < 50) { // Free
                        ctx.fillStyle = 'rgba(255, 255, 255, 1)';
                    }

                    ctx.fillRect(
                        offsetX + x * scale,
                        offsetY + y * scale,
                        scale,
                        scale
                    );
                }
            }

            // Draw LiDAR scan if available
            if (currentScan) {
                ctx.beginPath();
                ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
                ctx.lineWidth = 2;

                const centerX = width / 2;
                const centerY = height / 2;
                const maxRange = currentScan.range_max;
                const scale = Math.min(width, height) / (2 * maxRange);

                for (let i = 0; i < currentScan.ranges.length; i++) {
                    const range = currentScan.ranges[i];
                    if (range < currentScan.range_min || range > currentScan.range_max) continue;

                    const angle = currentScan.angle_min + i * currentScan.angle_increment;
                    const x = centerX + range * Math.cos(angle) * scale;
                    const y = centerY + range * Math.sin(angle) * scale;

                    if (i === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }
                }

                ctx.closePath();
                ctx.stroke();
            }
        }

        // Handle image loading
        img.onload = function() {
            console.log('Image loaded successfully');
            try {
                // Get container dimensions
                const container = videoCanvas.parentElement;
                const containerWidth = container.clientWidth;
                const containerHeight = container.clientHeight;
                
                // Calculate aspect ratio
                const aspectRatio = img.width / img.height;
                
                // Calculate new dimensions
                let width = containerWidth;
                let height = containerWidth / aspectRatio;
                
                if (height > containerHeight) {
                    height = containerHeight;
                    width = containerHeight * aspectRatio;
                }
                
                // Update canvas size
                videoCanvas.width = width;
                videoCanvas.height = height;
                
                // Clear canvas
                videoCtx.clearRect(0, 0, width, height);
                
                // Draw the image
                videoCtx.drawImage(img, 0, 0, width, height);
                
                console.log('Image drawn successfully');
            } catch (error) {
                console.error('Error drawing image:', error);
            }
        };

        img.onerror = function(error) {
            console.error('Error loading image:', error);
            term.writeln('\r\nError loading image: ' + error);
        };

        // Connect WebSocket when page loads
        connectWebSocket();

        // Update the sendCommand function to use the global robotWs
        async function sendCommand(command) {
            try {
                if (robotWs && robotWs.readyState === WebSocket.OPEN) {
                    if (isManualMode) {
                        robotWs.send(JSON.stringify({
                            type: 'control',
                            command: command
                        }));
                    } else {
                        term.writeln('\r\nManual mode is not active. Switch to manual mode to control the robot.');
                    term.write('$ ');
                    }
                } else {
                    console.error('WebSocket is not connected');
                    term.writeln('\r\nError: WebSocket is not connected');
                    term.write('$ ');
                }
            } catch (error) {
                console.error('Error sending command:', error);
                term.writeln('\r\nError sending command: ' + error);
                term.write('$ ');
            }
        }

        // Initialize Terminal
        const term = new Terminal({
            cursorBlink: true,
            fontSize: 14,
            fontFamily: 'Consolas, monospace',
            theme: {
                background: '#0b0c0f',  // Match the --main-bg color
                foreground: '#fff',
                cursor: '#ff1b6b'
            },
            scrollback: 1000,  /* Allow scrolling through 1000 lines of history */
            convertEol: true   /* Ensure proper line endings */
        });

        // Open terminal in container
        term.open(document.getElementById('terminal'));

        // Add welcome message
        term.writeln('\x1B[1;35m=== TurtleBot3 Terminal ===\x1B[0m');
        term.writeln('Type "help" for available commands');
        term.write('\r\n$ ');

        // Handle terminal input
        let currentLine = '';
        term.onKey(({ key, domEvent }) => {
            const printable = !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey;

            if (domEvent.keyCode === 13) { // Enter key
                term.write('\r\n');
                handleCommand(currentLine);
                currentLine = '';
                term.write('$ ');
            } else if (domEvent.keyCode === 8) { // Backspace
                if (currentLine.length > 0) {
                    currentLine = currentLine.slice(0, -1);
                    term.write('\b \b');
                }
            } else if (printable) {
                currentLine += key;
                term.write(key);
            }
        });

        // Handle commands
        function handleCommand(cmd) {
            cmd = cmd.trim().toLowerCase();
            switch (cmd) {
                case 'help':
                    term.writeln('Available commands:');
                    term.writeln('  help     - Show this help message');
                    term.writeln('  clear    - Clear terminal');
                    term.writeln('  status   - Show robot status');
                    break;
                case 'clear':
                    term.clear();
                    break;
                case 'status':
                    term.writeln('Robot Status:');
                    term.writeln('  Battery: 75%');
                    term.writeln('  Mode: Auto');
                    term.writeln('  Position: X:0.0 Y:0.0 Z:0.0');
                    break;
                default:
                    if (cmd !== '')
                        term.writeln(`Command not found: ${cmd}`);
                    break;
            }
        }
    </script>
</body>

</html>